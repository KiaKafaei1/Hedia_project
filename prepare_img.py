# -*- coding: utf-8 -*-
"""prepare_img.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pMy0R4fo4hUZQA6Vo0AKgC-0_JaXWEqz
"""

import matplotlib
import numpy as np
import pandas as pd
import torch 
import torchvision
import torch.nn as nn
import torch.nn.functional as F 
from torchvision import transforms
import cv2 
from PIL import Image
import matplotlib.pyplot as plt
import glob
import os
from IPython.display import clear_output
from skimage.io import imread
from skimage.transform import resize
from google.colab import drive

# run GPU .... 
if (torch.cuda.is_available()):
    device = torch.device("cuda")
    print(device, torch.cuda.get_device_name(0))
else:
    device= torch.device("cpu")
    print(device)

def prepare_img(img0, tt=[]):
  # lables of the food items as lib
  lib_lab = {"meatball": 1, "slice of bread": 2, "boiled potatoes":3, "fried egg":4,"glass of water":5, "chopped lettuce":6, "glass of milk":7, "boiled peas":8,"plain spaghetti":9, "plain rice":10}
  # bounding box true value for the image of choice and lables for bounding boxes
  allArrays = []
  allArraysL = [] 
  labels = []
  label= []
  bbox = []

  #Resize the input images to (h=800, w=800)
  img = cv2.resize(img0, dsize=(800, 800), interpolation=cv2.INTER_CUBIC)  

  # If lables and bbox included
  if isinstance(tt, pd.DataFrame):
    for i in range(tt.Nobj.values[0]):
      p_temp = tt[['bbx_'+str(i)+'_ymin','bbx_'+str(i)+'_xmin','bbx_'+str(i)+'_ymax','bbx_'+str(i)+'_xmax']].to_numpy()
      allArrays.append(p_temp)
      lableTemp = tt["bbx_"+str(i)+"_name"].map(lib_lab)
      allArraysL.append(lableTemp)
    #[ymin, xmin, ymax, xmax] bounding box 
    bbox0 = np.vstack(allArrays)
    bbox0 = bbox0.astype(int)
    label = np.vstack(allArraysL)
    # lables are stored as int in lib_lab and mapped into int 
    labels = label.reshape(-1)

    # change the bounding box coordinates 
    Wratio = 800/img0.shape[1]
    Hratio = 800/img0.shape[0]
    ratioLst = [Hratio, Wratio, Hratio, Wratio]
    for box in bbox0:
        box = [int(a * b) for a, b in zip(box, ratioLst)] 
        bbox.append(box)
    bbox = np.array(bbox)
    
    return labels, bbox, img

  else:
    return img

